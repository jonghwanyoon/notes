---
title: "성능평가에 사용할 수 있는 도구들"
author: "jonghwan"
date: "2024-09-18"
draft: true
---

<br><br>

정리 중.

## time {.unnumbered}

[@gnu_bash_time]

`time`은 shell keyword이다. 여기서 소개하는 것은 `/usr/bin/time`에 해당하는 것으로 **shell에 내장된 keyword가 아닌 GNU의 `time`**이다.

```bash
/usr/bin/time -v sleep 1s
```

![](time_v.png){width=70%}

- 장점: 상세하다. computing resource도 계산해준다.
- 단점: unix 계열 아니면 사용할 수 없음.


::: {.callout-tip title="TMI"}
- GNU time은 2017년부터 `Assaf Gordon` 라는 분이 관리했는데 Bioinformatics를 하시는 분이다.👀
- `which time`도 `/usr/bin/time`을 출력하는데, 그냥 path에 같이 있어서 그렇다. shell keyword로 대상으로 which를 하면 fail code를 반환한다.
:::


## hyperfine {.unnumbered}

[@Peter_hyperfine_2023]

[github](https://github.com/sharkdp/hyperfine)

![](hyperfine_example.png)

benchmarking 도구. 실행시간을 측정할 수 있다. warmup 파라미터로 정해진 횟수만큼 미리 실행해서, 초기화 작업으로 인한 영향 차이를 줄이고 조금 더 정확하게 측정 가능하다고 함.

- 장점: 간단하다. 이쁘고 보기좋게 측정해준다.
- 단점: CPU, Memory usage는 계산하지 못하는듯.

이쁜 timeit 느낌.


## psrecord {.unnumbered}

[@psrecord_2013]

[github](https://github.com/astrofrog/psrecord)

process id를 받고 CPU, Memory를 tracking하는 도구.

```bash
psrecord --log activity.txt --plot plot.png 'sleep 10s'
```

**github repo에 있는 예시**
![](https://github.com/astrofrog/psrecord/blob/main/screenshot.png?raw=true)

- 장점: 별도 process들을 tracking 할 수 있다. ploting이 가능하다.
- 단점: 아직 딱히 모르겠음. windows 테스트 안해봤음.

